#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Constructor de consultas interactivo
Permite construir consultas paso a paso mediante men√∫s
"""

import json
import os
import sys
from pathlib import Path

# Agregar el directorio src al path
sys.path.append(str(Path(__file__).parent / "src"))

from src.rag_pipeline import create_rag_pipeline
from src.export_utils import ExerciseExporter

class QueryBuilder:
    def __init__(self):
        self.query = {}
        self.materias = [
            "Sistemas de Inteligencia Artificial",
            "Probabilidad y Estad√≠stica"
        ]
        
        self.unidades = {
            "Sistemas de Inteligencia Artificial": [
                "Introducci√≥n",
                "Agentes y Ambientes",
                "M√©todos de b√∫squeda desinformados",
                "M√©todos de B√∫squeda Informados",
                "Algor√≠tmos de Mejoramiento Iterativo",
                "Algoritmos Gen√©ticos",
                "Optimizaci√≥n No Lineal",
                "Perceptr√≥n Simple Escal√≥n",
                "Perceptr√≥n Lineal y No Lineal",
                "Perceptr√≥n Multicapa",
                "M√©tricas y Sobreajuste",
                "Introducci√≥n Aprendizaje No Supervisado",
                "Modelo de Kohonen",
                "Autovalores y Autovectores",
                "PCA",
                "Regla de Oja y Sanger",
                "Modelo de Hopfield",
                "Deep Learning",
                "Autoencoders",
                "Redes Neuronales Convolucionales",
                "Redes Generativas Adversariales",
                "Transformers"
            ],
            "Probabilidad y Estad√≠stica": [
                "Introducci√≥n",
                "Estad√≠stica Descriptiva",
                "Axiomas",
                "Laplace",
                "Variable Aleatoria Discreta",
                "Variables Aleatorias Discretas Notables",
                "Variable Aleatoria Continua",
                "Distribuci√≥n Normal",
                "Variable Aleatoria Continua (2)",
                "Funci√≥n de Variable Aleatoria",
                "Mezcla de Variables Aleatorias",
                "Variables Aleatorias Bidimensionales Discretas",
                "Variables Aleatorias Bidimensionales Continuas",
                "Suma de Variables Aleatorias Independientes",
                "Teorema Central Del L√≠mite",
                "Estimaci√≥n",
                "Intervalos de Confianza",
                "Intervalos de Confianza para la Media - Distribuci√≥n T",
                "Tesis de Hip√≥tesis",
                "Tesis de Hip√≥tesis (2)",
                "Tesis de Hip√≥tesis sobre la media con desv√≠o desconocido",
                "Tesis de Hip√≥tesis sobre la proporci√≥n poblacional",
                "Procesos Estoc√°sticos",
                "Cadenas de Markov"
            ]
        }
        
        self.niveles_dificultad = [
            "basico",
            "intermedio", 
            "avanzado"
        ]
        
        self.tipos_ejercicio = [
            "multiple_choice",
            "desarrollo",
            "practico",
            "teorico"
        ]
        
        self.formatos = [
            "txt",
            "pdf",
            "tex"
        ]

    def mostrar_paso(self, paso, total):
        """Muestra el progreso del constructor"""
        print("\n" + "="*60)
        print(f"    CONSTRUCTOR DE CONSULTAS - PASO {paso}/{total}")
        print("="*60)

    def seleccionar_materia(self):
        """Permite seleccionar una materia de la lista"""
        print("üìö MATERIAS DISPONIBLES:")
        for i, materia in enumerate(self.materias, 1):
            print(f"   {i}) {materia}")
        
        while True:
            try:
                opcion = int(input("\nüëâ Ingrese el n√∫mero de la materia: "))
                if 1 <= opcion <= len(self.materias):
                    self.query['materia'] = self.materias[opcion - 1]
                    print(f"‚úÖ Materia seleccionada: {self.materias[opcion - 1]}")
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def seleccionar_unidad(self):
        """Permite seleccionar una unidad de la materia seleccionada"""
        if 'materia' not in self.query:
            print("‚ùå Primero debe seleccionar una materia.")
            return
        
        print(f"üìñ UNIDADES DE {self.query['materia'].upper()}:")
        unidades = self.unidades.get(self.query['materia'], ["Unidad no disponible"])
        
        for i, unidad in enumerate(unidades, 1):
            print(f"   {i}) {unidad}")
        
        while True:
            try:
                opcion = int(input("\nüëâ Ingrese el n√∫mero de la unidad: "))
                if 1 <= opcion <= len(unidades):
                    self.query['unidad'] = unidades[opcion - 1]
                    print(f"‚úÖ Unidad seleccionada: {unidades[opcion - 1]}")
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def seleccionar_cantidad(self):
        """Permite seleccionar la cantidad de ejercicios"""
        print("üî¢ CANTIDAD DE EJERCICIOS:")
        print("   Ingresa la cantidad de ejercicios que deseas generar")
        
        while True:
            try:
                cantidad = int(input("\nüëâ Ingrese la cantidad de ejercicios: "))
                if cantidad > 0:
                    self.query['cantidad'] = cantidad
                    print(f"‚úÖ Cantidad seleccionada: {cantidad} ejercicios")
                    return
                else:
                    print("‚ùå La cantidad debe ser mayor a 0.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def seleccionar_nivel_dificultad(self):
        """Permite seleccionar el nivel de dificultad"""
        print("üìä NIVEL DE DIFICULTAD:")
        for i, nivel in enumerate(self.niveles_dificultad, 1):
            print(f"   {i}) {nivel}")
        
        while True:
            try:
                opcion = int(input("\nüëâ Ingrese el n√∫mero del nivel: "))
                if 1 <= opcion <= len(self.niveles_dificultad):
                    self.query['nivel_dificultad'] = self.niveles_dificultad[opcion - 1]
                    print(f"‚úÖ Nivel seleccionado: {self.niveles_dificultad[opcion - 1]}")
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def seleccionar_tipo_ejercicio(self):
        """Permite seleccionar el tipo de ejercicio"""
        print("üìù TIPO DE EJERCICIO:")
        for i, tipo in enumerate(self.tipos_ejercicio, 1):
            print(f"   {i}) {tipo}")
        
        while True:
            try:
                opcion = int(input("\nüëâ Ingrese el n√∫mero del tipo: "))
                if 1 <= opcion <= len(self.tipos_ejercicio):
                    self.query['tipo_ejercicio'] = self.tipos_ejercicio[opcion - 1]
                    print(f"‚úÖ Tipo seleccionado: {self.tipos_ejercicio[opcion - 1]}")
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def seleccionar_formato(self):
        """Permite seleccionar el formato de salida"""
        print("üìÑ FORMATO DE SALIDA:")
        for i, formato in enumerate(self.formatos, 1):
            print(f"   {i}) {formato}")
        
        while True:
            try:
                opcion = int(input("\nüëâ Ingrese el n√∫mero del formato: "))
                if 1 <= opcion <= len(self.formatos):
                    self.query['formato'] = self.formatos[opcion - 1]
                    print(f"‚úÖ Formato seleccionado: {self.formatos[opcion - 1]}")
                    return
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero v√°lido.")

    def mostrar_resumen_final(self):
        """Muestra el resumen final de la consulta"""
        print("\n" + "="*60)
        print("    üéØ RESUMEN DE LA CONSULTA GENERADA")
        print("="*60)
        for clave, valor in self.query.items():
            print(f"   üìã {clave.replace('_', ' ').title()}: {valor}")
        print("="*60)

    def generar_ejercicios(self):
        """Genera los ejercicios directamente usando el sistema RAG"""
        print("\n" + "="*60)
        print("    üöÄ GENERANDO EJERCICIOS...")
        print("="*60)
        
        try:
            # Crear pipeline RAG
            print("üì¶ Cargando sistema RAG...")
            rag = create_rag_pipeline()
            
            # Generar ejercicios
            print(f"üé≤ Generando {self.query.get('cantidad', 1)} ejercicio(s)...")
            result = rag.generate_exercises(query_params=self.query)
            
            if result.get('ejercicios') and len(result.get('ejercicios', [])) > 0:
                print("‚úÖ ¬°Ejercicios generados exitosamente!")
                
                # Exportar archivos
                formato = self.query.get('formato', 'txt')
                print(f"üíæ Exportando a formato {formato.upper()}...")
                exporter = ExerciseExporter(output_directory="./output")
                archivos = exporter.export_all_versions(
                    result=result,
                    format=formato
                )
                
                print(f"\n‚úÖ Archivos generados en: {archivos['session_folder']}")
                print("   üìÑ Completo (todo)")
                print("   üìù Ejercicio (solo preguntas)")
                print("   üí° Pistas")
                print("   ‚úÖ Soluciones")
                
                return True
                
            else:
                print(f"‚ùå Error: {result.get('message', 'Error desconocido')}")
                print(f"üîç Debug - Resultado completo: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error durante la generaci√≥n: {str(e)}")
            return False

    def ejecutar(self):
        """Ejecuta el constructor de consultas paso a paso"""
        print("\n" + "="*60)
        print("    üöÄ CONSTRUCTOR DE CONSULTAS INTERACTIVO")
        print("="*60)
        print("   Te guiar√© paso a paso para crear tu consulta")
        print("="*60)
        
        # Paso 1: Seleccionar Materia
        self.mostrar_paso(1, 6)
        self.seleccionar_materia()
        
        # Paso 2: Seleccionar Unidad
        self.mostrar_paso(2, 6)
        self.seleccionar_unidad()
        
        # Paso 3: Seleccionar Cantidad
        self.mostrar_paso(3, 6)
        self.seleccionar_cantidad()
        
        # Paso 4: Seleccionar Nivel de Dificultad
        self.mostrar_paso(4, 6)
        self.seleccionar_nivel_dificultad()
        
        # Paso 5: Seleccionar Tipo de Ejercicio
        self.mostrar_paso(5, 6)
        self.seleccionar_tipo_ejercicio()
        
        # Paso 6: Seleccionar Formato
        self.mostrar_paso(6, 6)
        self.seleccionar_formato()
        
        # Mostrar resumen final
        self.mostrar_resumen_final()
        
        # Generar ejercicios directamente
        exito = self.generar_ejercicios()
        
        if exito:
            print(f"\nüéâ ¬°Ejercicios generados exitosamente!")
            print("üìÅ Revisa la carpeta 'output' para ver los archivos generados")
        else:
            print("\n‚ùå Hubo un problema al generar los ejercicios.")
        
        print("\nüëã ¬°Hasta luego!")

if __name__ == "__main__":
    builder = QueryBuilder()
    builder.ejecutar()
